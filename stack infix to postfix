#include <stack>
#include <string>
using namespace std;




// Mentukan apakah karakter adalah salah satu dari empat operator standar.
bool isOperator(char character) {
    if (character == '+' || character == '-' || character == '*' || character == '/') {
        return true;
    }
    return false;
}

// Jika karakter bukan operator atau tanda kurung, maka diasumsikan sebagai operand.
bool isOperand(char character) {
    if (!isOperator(character) && character != '(' && character != ')') {
        return true;
    }
    return false;
}

// Memandingkan operator yang didahulukan.
int compareOperators(char op1, char op2) {
    if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) { return -1; }
    else if ((op1 == '+' || op1 == '-') && (op2 == '*' || op2 == '/')) { return 1; }
    return 0;
}


int main()
{
    stack<char> opStack;
    string postFixString = "";
	
    char input[100];

    cout << "Masukkan infix: ";
    cin >> input;

    char *cPtr = input;
    while (*cPtr != '\0') {
        if (isOperand(*cPtr)) { postFixString += *cPtr; }
        else if (isOperator(*cPtr)) {
            while (!opStack.empty() && opStack.top() != '(' && compareOperators(opStack.top(),*cPtr) <= 0) {
                postFixString += opStack.top();
                opStack.pop();
            }
            opStack.push(*cPtr);
        }

        else if (*cPtr == '(') { opStack.push(*cPtr); } 
        else if (*cPtr == ')') {
    
    
    return 0;
    }
